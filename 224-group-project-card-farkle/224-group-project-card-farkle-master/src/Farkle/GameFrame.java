package Farkle;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.*;
import javax.swing.*;

/**
 *
 * @author kirsc
 */
public class GameFrame extends JFrame {

    /**
     * Creates new form GameFrame
     */
    public GameFrame(String names[]) {
        // This String array WILL be passed in from WelcomeFrame
        setPlayers(names);
        initComponents();
        initCards();
        nextPlayer();
        scoreHandButton.setEnabled(false);
        //System.out.println(playerCard1.getSize());

    }

    private void initCards() {
        final int MAX_NUMBER_CARDS = 8;
        card = new JButton[MAX_NUMBER_CARDS];
        card[0] = playerCard1;
        card[1] = playerCard2;
        card[2] = playerCard3;
        card[3] = playerCard4;
        card[4] = playerCard5;
        card[5] = playerCard6;
        card[6] = playerCard7;
        card[7] = playerCard8;
       

        for (int i = 0; i < card.length; ++i) {
            card[i].setBackground(Color.gray);
            card[i].setFocusPainted(false);
            card[i].setText("");
        }
        lockCards(false);
        hand = new Hand();
        scoreHand = new Hand();
        scorecard = new scorecardFrame(names);

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        playerCard1 = new javax.swing.JButton();
        playerCard2 = new javax.swing.JButton();
        playerCard3 = new javax.swing.JButton();
        playerCard4 = new javax.swing.JButton();
        playerCard5 = new javax.swing.JButton();
        playerCard6 = new javax.swing.JButton();
        playerCard7 = new javax.swing.JButton();
        playerCard8 = new javax.swing.JButton();
        playerTurnLabel = new javax.swing.JLabel();
        scoreGuideButton = new javax.swing.JButton();
        shuffleButton = new javax.swing.JButton();
        scoreboardButton = new javax.swing.JButton();
        scoreHandButton = new javax.swing.JButton();
        finishButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(850, 600));
        setPreferredSize(new java.awt.Dimension(850, 600));

        jPanel1.setMinimumSize(new java.awt.Dimension(500, 425));
        jPanel1.setName(""); // NOI18N

        playerCard1.setText("Card 1");
        playerCard1.setMinimumSize(new java.awt.Dimension(100, 140));
        playerCard1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerCard1ActionPerformed(evt);
            }
        });

        playerCard2.setText("Card 2");
        playerCard2.setMinimumSize(new java.awt.Dimension(100, 140));
        playerCard2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerCard2ActionPerformed(evt);
            }
        });

        playerCard3.setText("Card 3");
        playerCard3.setMinimumSize(new java.awt.Dimension(100, 140));
        playerCard3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerCard3ActionPerformed(evt);
            }
        });

        playerCard4.setText("Card 4");
        playerCard4.setMinimumSize(new java.awt.Dimension(100, 140));
        playerCard4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerCard4ActionPerformed(evt);
            }
        });

        playerCard5.setText("Card 5");
        playerCard5.setMinimumSize(new java.awt.Dimension(100, 140));
        playerCard5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerCard5ActionPerformed(evt);
            }
        });

        playerCard6.setText("Card 6");
        playerCard6.setMinimumSize(new java.awt.Dimension(100, 140));
        playerCard6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerCard6ActionPerformed(evt);
            }
        });

        playerCard7.setText("Card 7");
        playerCard7.setMinimumSize(new java.awt.Dimension(100, 140));
        playerCard7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerCard7ActionPerformed(evt);
            }
        });

        playerCard8.setText("Card 8");
        playerCard8.setMinimumSize(new java.awt.Dimension(100, 140));
        playerCard8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerCard8ActionPerformed(evt);
            }
        });

        playerTurnLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        playerTurnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerTurnLabel.setText("It is player's turn!");

        scoreGuideButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreGuideButton.setText("Scoring Guide");
        scoreGuideButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreGuideButtonActionPerformed(evt);
            }
        });

        shuffleButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        shuffleButton.setText("Shuffle");
        shuffleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleButtonActionPerformed(evt);
            }
        });

        scoreboardButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreboardButton.setText("View Scoreboard");
        scoreboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreboardButtonActionPerformed(evt);
            }
        });

        scoreHandButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreHandButton.setText("Score Hand");
        scoreHandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreHandButtonActionPerformed(evt);
            }
        });

        finishButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        finishButton.setText("Finish Turn");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(playerTurnLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(playerCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerCard6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerCard7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerCard8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(playerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playerCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(finishButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(scoreboardButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                                    .addComponent(scoreGuideButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(scoreHandButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(shuffleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {playerCard1, playerCard2, playerCard3, playerCard4, playerCard5, playerCard6, playerCard7, playerCard8});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {finishButton, scoreGuideButton, scoreHandButton, scoreboardButton, shuffleButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playerTurnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(shuffleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scoreHandButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(scoreGuideButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scoreboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(finishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playerCard4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerCard3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerCard2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerCard1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playerCard5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerCard6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerCard7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerCard8, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(518, 518, 518))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {playerCard1, playerCard2, playerCard3, playerCard4, playerCard5, playerCard6, playerCard7, playerCard8});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {finishButton, scoreGuideButton, scoreHandButton, scoreboardButton, shuffleButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // CARD BUTTONS
    private void playerCard8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerCard8ActionPerformed
        toggle(7);
    }//GEN-LAST:event_playerCard8ActionPerformed

    private void playerCard7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerCard7ActionPerformed
        toggle(6);
    }//GEN-LAST:event_playerCard7ActionPerformed

    private void playerCard6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerCard6ActionPerformed
        toggle(5);
    }//GEN-LAST:event_playerCard6ActionPerformed

    private void playerCard5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerCard5ActionPerformed
        toggle(4);
    }//GEN-LAST:event_playerCard5ActionPerformed

    private void playerCard4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerCard4ActionPerformed
        toggle(3);
    }//GEN-LAST:event_playerCard4ActionPerformed

    private void playerCard3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerCard3ActionPerformed
        toggle(2);
    }//GEN-LAST:event_playerCard3ActionPerformed

    private void playerCard2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerCard2ActionPerformed
        toggle(1);
    }//GEN-LAST:event_playerCard2ActionPerformed

    private void playerCard1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerCard1ActionPerformed
        toggle(0);
    }//GEN-LAST:event_playerCard1ActionPerformed

    
    // GAME BUTTONS
    private void shuffleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleButtonActionPerformed
        lockCards(true);
        if(numPicked == 0)
        {
            restoreHand();
            hand.shuffleWholeHand();
        }
        markChosenCards();
        
        //setCardValues();
        //if(canShuffle()) {
        //hand.removeCards();//THIS IS THE PROBLEMATIC FUNCTION
        hand.shuffleHand();
        setCardValues();
        hand.showHand();
          //  }
        hand.setAllCardAvalibility(true);
        if(farkleFound(hand))
        {
            // FARKLLEEE!!!!
            String ms = "<html><font size= 14 font color = #ff2929>FARKLE!!";

            int res = JOptionPane.showConfirmDialog(null, ms, "FARKLE!!", JOptionPane.DEFAULT_OPTION,
                      JOptionPane.PLAIN_MESSAGE, null);

            if (res < 1) {
                scorecard.placeScore(turn, 0, playerItt);
                endOfTurn();
                nextPlayer();
                restoreHand();
                shuffleButton.setEnabled(true);
                shuffleButton.doClick();

            }

        }
        shuffleButton.setEnabled(false);
        scoreHandButton.setEnabled(true);
    }//GEN-LAST:event_shuffleButtonActionPerformed

    private void scoreHandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreHandButtonActionPerformed
        scoreHand.removeAllCards();
        for(int i = 0; i < hand.getCards(); ++i)
        {
            if(card[i].getBackground() == Color.BLUE)
                scoreHand.setCard(hand.getCardSuit(i), hand.getCardValue(i));
        }
        
        scoreHand.sortHand();
        scoreHand.showHand();
        if(!farkleFound(scoreHand))
        {
            scoreHand.setAllCardAvalibility(true);
            hand.setAllCardAvalibility(true);
            if(!findAdvancedScores(scoreHand))
                findBasicPossibleScores(scoreHand);
            System.out.println("The current turn score is " + turnScore);
            shuffleButton.setEnabled(true);
            scorecard.placeScore(turn, turnScore, playerItt);
            scorecard.adjustTotalScores();
            removeScoredCards(scoreHand, hand);
        }
   
    }//GEN-LAST:event_scoreHandButtonActionPerformed

    private void scoreGuideButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreGuideButtonActionPerformed
        String ms = "<html><font size=6><b><u>Scoring Options</u></b></big>" +
                    "<br><font size=4>For individual turns" +
                    "<br><ul>" +
                    "<li>Every <strong>face card</strong> individually saved is worth <u>50</u> points" +
                    "<li>Every <strong>7</strong> card individually saved is worth <u>100</u> points" +
                    "<li>Every <strong>3</strong> card individually saved is worth <u>100</u> points" +
                    "<li>A <strong>pair</strong> of cards is worth <u>200</u> points" +
                    "<li>A <strong>2 pair</strong> is worth <u>500</u> points" +
                    "<li>A <strong>3 of a kind</strong> is worth <u>1000</u> points" +
                    "<li>A <strong>4 of a kind</strong> is worth <u>1500</u> points" +
                    "<li>A <strong>5 of a kind</strong> is worth <u>3000</u> points" +
                    "<li>A <strong>6 of a kind</strong> is worth <u>5000</u> points" +
                    "<li>A <strong>7 of a kind</strong> is worth <u>7500</u> points" +
                    "<li>A <strong>8 of a kind</strong> is worth <u>10,000</u> points (an instant win)" +
                    "<li>A <strong>full house</strong> is worth <u>1500</u> points" +
                    "<li>A <strong>5 card straight</strong> is worth <u>2000</u> points" +
                    "<li>A <strong>5 card flush</strong> is worth <u>3000</u> points" +
                    "<li>A <strong>Royal Flush</strong> is worth <u>6000</u> points" +
                    "</ul>";
        
        JOptionPane op = new JOptionPane();
        op.setPreferredSize(new Dimension(550, 430));
        op.setMessage(ms);
        op.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        
        JDialog dialog = op.createDialog(null, "Score Guide");
        dialog.setModal(false);
        dialog.setVisible(true);
        
    }//GEN-LAST:event_scoreGuideButtonActionPerformed

    private void scoreboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreboardButtonActionPerformed
        System.out.println("Here be the scoreboard");
        scorecard.setVisible(true);
        scorecard.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_scoreboardButtonActionPerformed

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        if (endGameCheck()) {
            System.out.println("End of the game");
            replayDialog();
        } else
            System.out.println("Not yet");
        endOfTurn();
        nextPlayer();
        restoreHand();
        shuffleButton.setEnabled(true);
        shuffleButton.doClick();
    }//GEN-LAST:event_finishButtonActionPerformed


    public void tryImage(){
        card[0].setIcon(new ImageIcon("Farkle\\cardsDeck\\5S.png"));
    }
    
    // Toggle
    public void toggle(int index) {
        //if(card[index].getBackground() != Color.BLACK) {
            if (card[index].getBackground() == Color.gray) {
                card[index].setBackground(Color.BLUE);
            } else {
                card[index].setBackground(Color.gray);
            }
        //}
    }

    private boolean endGameCheck() {
        int ret = scorecard.getPlayerScore(playerItt);
        System.out.println("PScore: " + ret + " Turn: " + turn);
        if (turn >= 20 || ret >= 10000)
            return true;
        return false;
    }

    private void replayDialog() {
        String ms = "<html><font size = 9><u>Game Over!</u>" +
                "<br><br><font size = 5>Would you like to play again?";

        int res = JOptionPane.showConfirmDialog(null, ms, "Game Over", JOptionPane.YES_NO_OPTION,
                JOptionPane.PLAIN_MESSAGE, null);

        this.dispose();
        if (res == 0) {
            GameFrame newGame = new GameFrame(names);
            newGame.setVisible(true);
            newGame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            newGame.pack();
        } else {
            Runtime.getRuntime().exit(0);
        }
    }

    public void markChosenCards(){
        
        for(int i = 0; i < 8; ++i)
        {
            card[i].setVisible(true);
            card[i].setEnabled(true);
            card[i].setBackground(Color.gray);
            if(hand.getCards() != 8)
                hand.shuffleWholeHand();
        }
        
        for(int i = 7; i > numPicked - 1; i--){
                    card[i].setBackground(Color.BLACK);
                    card[i].setVisible(false);
                    card[i].setEnabled(false);
                    hand.removeCard();
        }
    }

    public void removeScoredCards(Hand scoreHand, Hand farkleHand)
    {
        if(scoreHelper.maxOfASuitFound(scoreHand, suit) >= 5)
        {
            for(int i = 0; i < farkleHand.getCards(); ++i)
            {
                if(suit == farkleHand.getCardSuit(i))
                    farkleHand.setCardAvailibility(i, false);
            }
        }
        
        if(scoreHelper.maxStraightFound(scoreHand, index) >= 5)
        {
            for (int i = 0; i < 4; ++i)
            {
                for(int j = 0; j < farkleHand.getCards(); ++j)
                {
                    if(farkleHand.getCardValue(j) == index)
                    {
                        farkleHand.setCardAvailibility(j, false);
                        ++index;
                        System.out.println("Card now false");
                    }
                }
            }
        }
      
        for(int i = 0; i < scoreHand.getCards(); ++i)
        {
            for (int j = 0; j < farkleHand.getCards(); ++j)
            {
                
                if(!scoreHand.getCardAvailability(i))
                {
                    if(scoreHand.getCardSuit(i) == farkleHand.getCardSuit(j) && scoreHand.getCardValue(i) == farkleHand.getCardValue(j))
                    {
                        card[j].setVisible(false);
                        card[j].setEnabled(false);
                        card[j].setBackground(Color.gray);
                    }
                }
            }
            
        }
        
    }
    public void restoreHand(){
        for(int i = 0; i < 8; i++)
        {
            card[i].setVisible(true);
            card[i].setEnabled(true);
            card[i].setBackground(Color.gray);
        }
        hand.setNumberofCards(8);
        numPicked = 8;
    }

    public boolean canShuffle(){
        int num = 0;
        for(int i = 0; i < numPicked; i++){
            if(card[i].getBackground() == Color.gray)
                num++;
        }
        //If all of the buttons aren't pressed, then
        System.out.println("Count: " + numPicked + " | Num: " + num);
        if(numPicked == num) {
            numPicked = num;
            return false;
        }
        else {
            numPicked = num;
            return true;
        }
    }

    // End of Turn Function
    private void endOfTurn() {
        // add turnScore to the player's score.
        // Check if player's score is >= 10,000
        // If it is display an end game message
        restoreHand();
        hand.shuffleWholeHand();
        for (int i = 0; i < card.length; ++i) {
            card[i].setBackground(Color.gray);
        }

        numPicked = 8;
        ++playerItt;
        playerItt = playerItt % names.length;
        if(playerItt == 0)
        {
            ++turn;
        }
    }
    
    // Set Frame for the next player
    private void nextPlayer() {
        String playerBanner = "It is " + names[playerItt] + "'s turn";        
        playerTurnLabel.setText(playerBanner);
        
        turnScore = 0;
    }
    
    private void setCardValues() {
        for (int i = 0; i < numPicked; ++i) {
            // This can be replaced with the get card numerical value
            setImage(i, hand.getCardValue(i), hand.getCardSuit(i));
            //card[i].setText(hand.getCardName(i));
        }
    }
    
    private boolean findAdvancedScores(Hand farkleHand)
    {
       int scoreKeeper;
       boolean rfFound = false;
       boolean fFound = false;
       boolean anyFound = false;
       
       if(scoreHelper.royalFlushFound(farkleHand)) 
       {
           turnScore += 6000;
           numPicked -= 5;
           rfFound = true;
           anyFound = true;
       }
       
       scoreKeeper = scoreHelper.maxOfASuitFound(farkleHand, suit);
       if(!rfFound && scoreKeeper >= 5)
       {
            turnScore += 3000;
            numPicked -= scoreKeeper;
            fFound = true;
            anyFound = true;
       }
      
       if(!rfFound && !fFound)
       {
           scoreKeeper = scoreHelper.maxStraightFound(farkleHand, index);
           if(scoreKeeper >= 5)
           {
                turnScore += 2000;
                numPicked -= scoreKeeper;
                anyFound = true;
           }
       }

        return anyFound;
    }
    private void findBasicPossibleScores(Hand farkleHand)
    {
       int scoreKeeper = 0;
       
       scoreKeeper = scoreHelper.maxOfAKindFound(farkleHand);
       if(scoreKeeper == 3)
       {
           farkleHand.setAllCardAvalibility(true);
           if(scoreHelper.fullHouseFound(farkleHand))
           {
               turnScore+= 1500;
               numPicked -= 5;
           }
            scoreKeeper = scoreHelper.maxOfAKindFound(farkleHand);
       }
       if(scoreKeeper == 8)
       {
           turnScore += 10000;
           numPicked -= 8;  
       }
       if(scoreKeeper == 7)
       {
           turnScore += 7500;
           numPicked -= 7;
       }
       if(scoreKeeper == 6)
       {
           turnScore += 5000;
           numPicked -= 6;
       }
       if(scoreKeeper == 5)
       {
           turnScore += 3000;
           numPicked -= 5;
       }
       if(scoreKeeper == 4)
       {
           turnScore += 1500;
           numPicked -= 4;
           
           scoreKeeper = scoreHelper.maxOfAKindFound(farkleHand);
           if(scoreKeeper == 4)
           {
               turnScore += 1500;
               numPicked -= 4;
           }
       }
       if(scoreKeeper == 3)
       {
           turnScore += 1000;
           numPicked -= 3;
           
           scoreKeeper = scoreHelper.maxOfAKindFound(farkleHand);
           if(scoreKeeper == 3)
           {
               turnScore += 1000;
               numPicked -= 3;
           }
       }
       scoreKeeper = scoreHelper.findPairs(farkleHand);
       if(scoreKeeper == 4)
       {
           turnScore += 1000;
           numPicked -= 8;
       }
       if(scoreKeeper == 3)
       {
           turnScore += 700;
           numPicked -= 6;
       }
       if(scoreKeeper == 2)
       {
           turnScore += 500;
           numPicked -= 4;
       }
       if(scoreKeeper == 1)
       {
           turnScore += 200;
           numPicked -= 2;
       }

       scoreKeeper = scoreHelper.findSevens(farkleHand);
       if(scoreKeeper > 0)
       {
           turnScore += (100 * scoreKeeper);
           numPicked -= scoreKeeper;
       }
       scoreKeeper = scoreHelper.findThrees(farkleHand);
       if(scoreKeeper > 0)
       {
           turnScore += (100 * scoreKeeper);
           numPicked -= scoreKeeper;
       }
       scoreKeeper = scoreHelper.findFaces(farkleHand);
       if(scoreKeeper > 0)
       {
           turnScore += (50 * scoreKeeper);
           numPicked -= scoreKeeper;
       }
    }

    public void lockCards(boolean locked){
            for(int i = 0; i < numPicked; i++)
                card[i].setEnabled(locked);
    }

    public void setImage(int button, int value, int suit){
        String filePath = "src\\Farkle\\cardsDeck";

        //Spades
        if(value == 0 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\AS.png"));}
        else if(value == 1 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\2S.png"));}
        else if(value == 2 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\3S.png"));}
        else if(value == 3 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\4S.png"));}
        else if(value == 4 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\5S.png"));}
        else if(value == 5 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\6S.png"));}
        else if(value == 6 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\7S.png"));}
        else if(value == 7 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\8S.png"));}
        else if(value == 8 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\9S.png"));}
        else if(value == 9 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\10S.png"));}
        else if(value == 10 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\JS.png"));}
        else if(value == 11 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\QS.png"));}
        else if(value == 12 && suit == 0){card[button].setIcon(new ImageIcon(filePath + "\\KS.png"));}
        //Clubs
        else if(value == 0 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\AC.png"));}
        else if(value == 1 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\2C.png"));}
        else if(value == 2 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\3C.png"));}
        else if(value == 3 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\4C.png"));}
        else if(value == 4 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\5C.png"));}
        else if(value == 5 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\6C.png"));}
        else if(value == 6 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\7C.png"));}
        else if(value == 7 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\8C.png"));}
        else if(value == 8 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\9C.png"));}
        else if(value == 9 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\10C.png"));}
        else if(value == 10 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\JC.png"));}
        else if(value == 11 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\QC.png"));}
        else if(value == 12 && suit == 1){card[button].setIcon(new ImageIcon(filePath + "\\KC.png"));}
        //Hearts
        else if(value == 0 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\AH.png"));}
        else if(value == 1 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\2H.png"));}
        else if(value == 2 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\3H.png"));}
        else if(value == 3 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\4H.png"));}
        else if(value == 4 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\5H.png"));}
        else if(value == 5 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\6H.png"));}
        else if(value == 6 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\7H.png"));}
        else if(value == 7 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\8H.png"));}
        else if(value == 8 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\9H.png"));}
        else if(value == 9 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\10H.png"));}
        else if(value == 10 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\JH.png"));}
        else if(value == 11 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\QH.png"));}
        else if(value == 12 && suit == 2){card[button].setIcon(new ImageIcon(filePath + "\\KH.png"));}
        //Diamonds
        else if(value == 0 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\AD.png"));}
        else if(value == 1 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\2D.png"));}
        else if(value == 2 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\3D.png"));}
        else if(value == 3 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\4D.png"));}
        else if(value == 4 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\5D.png"));}
        else if(value == 5 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\6D.png"));}
        else if(value == 6 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\7D.png"));}
        else if(value == 7 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\8D.png"));}
        else if(value == 8 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\9D.png"));}
        else if(value == 9 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\10D.png"));}
        else if(value == 10 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\JD.png"));}
        else if(value == 11 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\QD.png"));}
        else if(value == 12 && suit == 3){card[button].setIcon(new ImageIcon(filePath + "\\KD.png"));}
    }

    public void setPlayers(String names[]) {
        this.names = names;
    }
    
    public boolean farkleFound(Hand farkleHand)
    {
        boolean fFound = true;
        
        if(scoreHelper.royalFlushFound(farkleHand))
            fFound = false;
        else if(scoreHelper.fullHouseFound(farkleHand))
            fFound = false;
        else if(scoreHelper.maxStraightFound(farkleHand, index) >= 5)
            fFound = false;
        else if(scoreHelper.maxOfAKindFound(farkleHand)>= 2)
            fFound = false;
        else if(scoreHelper.maxOfASuitFound(farkleHand, suit) >= 5)
            fFound = false;
        else if(scoreHelper.findFaces(farkleHand) > 0)
            fFound = false;
        else if(scoreHelper.findSevens(farkleHand) > 0 || scoreHelper.findThrees(farkleHand) > 0)
            fFound = false;
        
        return fFound; 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton finishButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton playerCard1;
    private javax.swing.JButton playerCard2;
    private javax.swing.JButton playerCard3;
    private javax.swing.JButton playerCard4;
    private javax.swing.JButton playerCard5;
    private javax.swing.JButton playerCard6;
    private javax.swing.JButton playerCard7;
    private javax.swing.JButton playerCard8;
    private javax.swing.JLabel playerTurnLabel;
    private javax.swing.JButton scoreGuideButton;
    private javax.swing.JButton scoreHandButton;
    private javax.swing.JButton scoreboardButton;
    private javax.swing.JButton shuffleButton;
    // End of variables declaration//GEN-END:variables
    
        JButton[] card;             // The array of game cards
        private Hand hand;                  // ???
        private int numPicked = 8;  //number of cards drawn for the hand
        private boolean isFarkle;           // Boolean to track if the current player got a farkle or not
        private String names[];     // The String array of player names
        private int playerItt = 0;  // int itterator to track the turns looping through the players (player 1 default)
        private int turnScore;              // The score the player has accumulated during their turn
        private Score scoreHelper = new Score();          // Score varaible to access functions in score class to calculate scores
        Hand scoreHand;                        //hand for scoring
        scorecardFrame scorecard;
        private int turn = 1;
        private int suit = 0;
        private int index = 0;

}
